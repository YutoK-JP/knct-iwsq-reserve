// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  TEACHING_ASSISTANT
  ADMIN
}

enum Department {
  M // 機械工学科
  E // 電気情報工学科
  C // 環境都市工学科
  A // 建築学科
  S // 専攻科
  GRADUATE // 卒業生
  PARENT // 保護者
  TEACHER // 教員
  OTHER // その他
}

enum Grade {
  FIRST // 本科1年
  SECOND // 本科2年
  THIRD // 本科3年
  FOURTH // 本科4年
  FIFTH // 本科5年
  JUNIOR // 専攻科1年
  SENIOR // 専攻科2年
  GRADUATE // 卒業生
  PARENT // 保護者
  TEACHER // 教員
  OTHER // その他
}

model EventUser {
  id            String       @id @default(cuid())
  department    Department
  grade         Grade
  name          String
  email         String
  mails         Mail[]
  participantId String?
  Participant   Participant? @relation(fields: [participantId], references: [id])
  applicantId   String?
  Applicant     Applicant?   @relation(fields: [applicantId], references: [id])
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map("updated_at")
}

model Applicant {
  id           String      @id @default(cuid())
  canceled_at  DateTime?
  cancel_token String
  EventUser    EventUser[]
  eventId      String
  Event        Event       @relation(fields: [eventId], references: [id])
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
}

model Participant {
  id           String      @id @default(cuid())
  canceled_at  DateTime?
  cancel_token String
  EventUser    EventUser[]
  eventId      String
  Event        Event       @relation(fields: [eventId], references: [id])
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
}

model Mail {
  id         Int           @id @default(sequence())
  subject    String
  body       String
  sender     DashboardUser @relation(fields: [senderId], references: [id])
  senderId   String
  recipients EventUser[]
  createdAt  DateTime      @default(now()) @map("created_at")
}

model Event {
  id               String            @id @default(cuid())
  name             String
  description      String?
  place            String
  published_at     DateTime?
  hidden           Boolean           @default(true)
  start_time       DateTime
  end_time         DateTime
  organizer        DashboardUser     @relation(fields: [organizerId], references: [id])
  organizerId      String
  attendance_limit Int
  ApprovalRequest  ApprovalRequest[]
  Applicant        Applicant[]
  Participant      Participant[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at")
}

enum ApprovalRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

model ApprovalRequest {
  id        String                @id @default(cuid())
  status    ApprovalRequestStatus @default(PENDING)
  eventId   String
  event     Event                 @relation(fields: [eventId], references: [id])
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @default(now()) @updatedAt @map("updated_at")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user DashboardUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String        @id @default(cuid())
  sessionToken String        @unique
  userId       String
  expires      DateTime
  user         DashboardUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DashboardUser {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  role          Role      @default(GUEST)
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  mails         Mail[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
